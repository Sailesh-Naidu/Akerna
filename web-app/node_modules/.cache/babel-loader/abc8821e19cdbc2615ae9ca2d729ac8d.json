{"ast":null,"code":"import axios from'axios';import NProgress from'nprogress';var apiBaseUrl=\"\".concat(process.env.REACT_APP_API_URL);/**\n * Axios basic configuration\n * Some general configuration can be added like timeout, headers, params etc. More details can be found on https://github.com/axios/axios\n * */var baseConfig={baseURL:apiBaseUrl};/**\n * Creating the instance of Axios\n * It is because, in large scale application we may need to consume APIs from more than single server,\n * So, may need to create multiple http client with different config\n * Only this client will be used rather than axios in the application\n * */var httpClient=axios.create(baseConfig);/**\n * Auth interceptors\n * @description Configuration related to AUTH token can be done in interceptors.\n * @param {*} config\n */var authInterceptor=function authInterceptor(config){/** add auth token */return config;};var loggerInterceptor=function loggerInterceptor(config){/** Add logging here */return config;};var requestProgress=function requestProgress(config){NProgress.start();return config;};/** Adding the request interceptors */httpClient.interceptors.request.use(authInterceptor);httpClient.interceptors.request.use(loggerInterceptor);httpClient.interceptors.request.use(requestProgress);/** Adding the response interceptors */httpClient.interceptors.response.use(function(response){NProgress.done();return response.data;},function(error){NProgress.done();return Promise.reject(error.response);});export{httpClient};","map":{"version":3,"sources":["/Users/saileshpola/Downloads/akerna-caffeine-app/web-app/src/api/index.js"],"names":["axios","NProgress","apiBaseUrl","process","env","REACT_APP_API_URL","baseConfig","baseURL","httpClient","create","authInterceptor","config","loggerInterceptor","requestProgress","start","interceptors","request","use","response","done","data","error","Promise","reject"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,SAAP,KAAsB,WAAtB,CAEA,GAAMC,CAAAA,UAAU,WAAKC,OAAO,CAACC,GAAR,CAAYC,iBAAjB,CAAhB,CAEA;AACA;AACA;AACA,KACA,GAAMC,CAAAA,UAAU,CAAG,CACjBC,OAAO,CAAEL,UADQ,CAAnB,CAIA;AACA;AACA;AACA;AACA;AACA,KACA,GAAMM,CAAAA,UAAU,CAAGR,KAAK,CAACS,MAAN,CAAaH,UAAb,CAAnB,CAEA;AACA;AACA;AACA;AACA,GACA,GAAMI,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,MAAD,CAAY,CAClC,qBACA,MAAOA,CAAAA,MAAP,CACD,CAHD,CAKA,GAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACD,MAAD,CAAY,CACpC,uBACA,MAAOA,CAAAA,MAAP,CACD,CAHD,CAKA,GAAME,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACF,MAAD,CAAY,CAClCV,SAAS,CAACa,KAAV,GACA,MAAOH,CAAAA,MAAP,CACD,CAHD,CAKA,sCACAH,UAAU,CAACO,YAAX,CAAwBC,OAAxB,CAAgCC,GAAhC,CAAoCP,eAApC,EACAF,UAAU,CAACO,YAAX,CAAwBC,OAAxB,CAAgCC,GAAhC,CAAoCL,iBAApC,EACAJ,UAAU,CAACO,YAAX,CAAwBC,OAAxB,CAAgCC,GAAhC,CAAoCJ,eAApC,EAEA,uCACAL,UAAU,CAACO,YAAX,CAAwBG,QAAxB,CAAiCD,GAAjC,CACE,SAACC,QAAD,CAAc,CACZjB,SAAS,CAACkB,IAAV,GACA,MAAOD,CAAAA,QAAQ,CAACE,IAAhB,CACD,CAJH,CAKE,SAACC,KAAD,CAAW,CACTpB,SAAS,CAACkB,IAAV,GACA,MAAOG,CAAAA,OAAO,CAACC,MAAR,CAAeF,KAAK,CAACH,QAArB,CAAP,CACD,CARH,EAWA,OAASV,UAAT","sourcesContent":["import axios from 'axios';\nimport NProgress from 'nprogress';\n\nconst apiBaseUrl =`${process.env.REACT_APP_API_URL}`;\n\n/**\n * Axios basic configuration\n * Some general configuration can be added like timeout, headers, params etc. More details can be found on https://github.com/axios/axios\n * */\nconst baseConfig = {\n  baseURL: apiBaseUrl,\n};\n\n/**\n * Creating the instance of Axios\n * It is because, in large scale application we may need to consume APIs from more than single server,\n * So, may need to create multiple http client with different config\n * Only this client will be used rather than axios in the application\n * */\nconst httpClient = axios.create(baseConfig);\n\n/**\n * Auth interceptors\n * @description Configuration related to AUTH token can be done in interceptors.\n * @param {*} config\n */\nconst authInterceptor = (config) => {\n  /** add auth token */\n  return config;\n};\n\nconst loggerInterceptor = (config) => {\n  /** Add logging here */\n  return config;\n};\n\nconst requestProgress = (config) => {\n  NProgress.start();\n  return config;\n};\n\n/** Adding the request interceptors */\nhttpClient.interceptors.request.use(authInterceptor);\nhttpClient.interceptors.request.use(loggerInterceptor);\nhttpClient.interceptors.request.use(requestProgress);\n\n/** Adding the response interceptors */\nhttpClient.interceptors.response.use(\n  (response) => {\n    NProgress.done();\n    return response.data;\n  },\n  (error) => {\n    NProgress.done();\n    return Promise.reject(error.response);\n  },\n);\n\nexport { httpClient };\n"]},"metadata":{},"sourceType":"module"}